---
title: "Mini Project 3: Spatial Data"
author: "Irene Xu, Junru Wu, & Sarah Wu"
date: "4/16/2019"
output: 
  html_document:
    code_folding: hide
---
#### We came up with a system of rating the difficulty of existing trails in Macleish (#1)

#### 1. Loading packages
```{r message = FALSE, warning = FALSE}
library(tidyverse)
library(sf)
library(macleish)
library(leaflet)
library(ggplot2)
```

#### 2. Transform data type & coordination system
```{r message = FALSE, warning = FALSE}
macleish_layers_pt <- st_intersection(
  pluck(macleish_layers, "trails"), 
  pluck(macleish_layers, "contours_3m")) %>% 
  st_cast("MULTIPOINT") %>% 
  st_cast("POINT")

macleish_sf <- st_as_sf(macleish_layers_pt, coords = c("longitude", "latitude"), crs = 4326)
```

#### 3. Visualize the existing trails in Macleish
```{r message = FALSE, warning = FALSE}
leaflet() %>%
  addTiles() %>%
  addPolygons(data = macleish_layers[["boundary"]], 
              weight = 1, fillOpacity = 0.1) %>%
  addPolylines(data = macleish_layers[["trails"]], 
               weight = 5, color = "black",
               popup = ~ name) %>%
  addPolylines(data = macleish_layers[["contours_3m"]], 
               weight = 1, color = "red") %>%
  addMarkers(data = macleish_sf, label = ~as.character(ELEV_M))
```

#### 4. Rationale of our classification system of trail difficulty
?????????????

* Shenandoah's Hiking Difficulty
https://www.nps.gov/shen/planyourvisit/how-to-determine-hiking-difficulty.htm
* Other existing sources on hiking difficulties
* Advice from Paul: rather than easy - change it to grandma/children/teens
* Final decision

#### 5. Determine the equation that calculates overall difficulty
$\hat{Difficulty} = Distance * sd(Elevation)$

#### 6. Add a variable that calculates the total length of each trail
```{r message = FALSE, warning = FALSE}
trails <- macleish_layers %>%
  pluck("trails") %>%
  mutate(computed_length = st_length(geometry)) %>%
  group_by(name) %>%
  summarize(total_length = sum(computed_length))
```

#### 7. Add a variable that alculates the standard deviation of elevation for each trail, which represents the rate of change in elevation.
```{r message = FALSE, warning = FALSE}
macleish_sf <- macleish_sf %>%
  group_by(name) %>%
  mutate(std.dev = sd(ELEV_M)) %>%
  select(name, std.dev) %>%
  group_by(name) %>%
  summarize(std.dev = mean(std.dev))
```

#### 8. Convert trails and macleish_sf from sf into data frames and join them into one final data frame
```{r message = FALSE, warning = FALSE}
measures <- data.frame(trails) %>%
  inner_join(data.frame(macleish_sf), by = "name") %>%
  select(-geometry.x, -geometry.y) %>%
  mutate(difficulty = (total_length/100) * std.dev)
measures
```

#### Interpretation



#### Discussion
